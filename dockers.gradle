/*
 * Copyright (C) 2007-2019 Crafter Software Corporation. All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import org.apache.commons.lang3.StringUtils

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'
    }
}

def dockerImageDir = "${projectDir}/docker/images"
def dockerImageBuildDir = "${dockerImageDir}/build"
def envs = ["authoring", "delivery"]

def defaultTomcatBinExcludes = [
    "migration",
    "upgrade",
    "crafter-deployer",
    "elasticsearch",
    "solr",
    "dbms",
    "apache-tomcat/work/**",
    "apache-tomcat/temp/**",
    "apache-tomcat/webapps/crafter-search*",
    "apache-tomcat/webapps/crafter-social*",
    "apache-tomcat/webapps/crafter-profile*",
    "apache-tomcat/webapps/ROOT",
    "apache-tomcat/webapps/studio",
    "**/*.pid"   
]

def withCrafterSearchTomcatBinExcludes = [
    "migration",
    "upgrade",
    "crafter-deployer",
    "elasticsearch",
    "solr",
    "dbms",
    "apache-tomcat/work/**",
    "apache-tomcat/temp/**",
    "apache-tomcat/webapps/crafter-search",
    "apache-tomcat/webapps/crafter-social*",
    "apache-tomcat/webapps/crafter-profile*",
    "apache-tomcat/webapps/ROOT",
    "apache-tomcat/webapps/studio",
    "**/*.pid"   
]

def withProfileTomcatBinExcludes = [
    "migration",
    "upgrade",
    "crafter-deployer",
    "elasticsearch",
    "solr",
    "dbms",
    "apache-tomcat/work/**",
    "apache-tomcat/temp/**",
    "apache-tomcat/webapps/crafter-search*",
    "apache-tomcat/webapps/crafter-social*",
    "apache-tomcat/webapps/crafter-profile",
    "apache-tomcat/webapps/crafter-profile-admin",
    "apache-tomcat/webapps/ROOT",
    "apache-tomcat/webapps/studio",
    "**/*.pid"   
]

envs.each { env ->
    def capitalizedEnv = StringUtils.capitalize(env)

    if (!tasks.findByName("build${capitalizedEnv}TomcatDocker")) {
        task "build${capitalizedEnv}TomcatDocker" {
            def buildDir = "${dockerImageBuildDir}/${env}/tomcat"
            def envDir = env.equalsIgnoreCase("authoring") ? "${authEnvDir}" : "${deliveryEnvDir}"

            doFirst {
                cleanBuildDir(buildDir)
            }
            doLast {
                copy {
                    from "${dockerImageDir}/${env}/tomcat/"
                    into buildDir
                }

                copy {
                    from "${envDir}/bin/"
                    into "${buildDir}/bin"
                    exclude defaultTomcatBinExcludes
                }

                exec {
                    commandLine commandLinePrefix + ['docker', 'build', '-t', "craftercms/${env}_tomcat:${project.version}", buildDir]
                }
            }
        }
    }

    if (!tasks.findByName("build${capitalizedEnv}TomcatDockerWithCrafterSearch")) {
        task "build${capitalizedEnv}TomcatDockerWithCrafterSearch" {
            def buildDir = "${dockerImageBuildDir}/${env}/tomcat_w_crafter_search"
            def envDir = env.equalsIgnoreCase("authoring") ? "${authEnvDir}" : "${deliveryEnvDir}"

            doFirst {
                cleanBuildDir(buildDir)
            }
            doLast {
                copy {
                    from "${dockerImageDir}/${env}/tomcat/"
                    into buildDir
                }

                copy {
                    from "${envDir}/bin/"
                    into "${buildDir}/bin"
                    exclude withCrafterSearchTomcatBinExcludes
                }

                exec {
                    commandLine commandLinePrefix + ['docker', 'build', '-t', "craftercms/${env}_tomcat_solr_compatible:${project.version}", buildDir]
                }
            }
        }
    }

    if (!tasks.findByName("build${capitalizedEnv}TomcatDockerWithProfile")) {
        task "build${capitalizedEnv}TomcatDockerWithProfile" {
            def buildDir = "${dockerImageBuildDir}/${env}/tomcat_w_profile"
            def envDir = env.equalsIgnoreCase("authoring") ? "${authEnvDir}" : "${deliveryEnvDir}"

            doFirst {
                cleanBuildDir(buildDir)
            }
            doLast {
                copy {
                    from "${dockerImageDir}/${env}/tomcat/"
                    into buildDir
                }

                copy {
                    from "${envDir}/bin/"
                    into "${buildDir}/bin"
                    exclude withProfileTomcatBinExcludes
                }

                exec {
                    commandLine commandLinePrefix + ['docker', 'build', '-t', "craftercms/${env}_tomcat_w_profile:${project.version}", buildDir]
                }
            }
        }
    }
}

task buildDeployerDocker {
    def buildDir = "${dockerImageBuildDir}/deployer"

    doFirst {
        cleanBuildDir(buildDir)
    }

    doLast {
        copy {
            from "${dockerImageDir}/deployer/"
            into buildDir
        }

        copy {
            from "${deliveryEnvDir}/bin/"
            into "${buildDir}/bin"     
            exclude "migration"
            exclude "upgrade"
            exclude "apache-tomcat"
            exclude "elasticsearch"
            exclude "solr"
            exclude "**/*.pid"
        }

        exec {
            commandLine commandLinePrefix + ['docker', 'build', '-t', "craftercms/deployer:${project.version}", buildDir]
        }
    }
}

task buildGitSshServerDocker {
    def buildDir = "${dockerImageBuildDir}/git_ssh_server"

    doFirst {
        cleanBuildDir(buildDir)
    }

    doLast {
        copy {
            from "${dockerImageDir}/git_ssh_server/"
            into buildDir
        }

        exec {
            commandLine commandLinePrefix + ['docker', 'build', '-t', "craftercms/git_ssh_server:${project.version}", buildDir]
        }
    }    
}

def cleanBuildDir(buildDir) {
    delete buildDir
    mkdir buildDir 
}

task buildAuthoringDockers {
    dependsOn 'buildAuthoringTomcatDocker'
    dependsOn 'buildAuthoringTomcatDockerWithCrafterSearch'
    if (includeProfile) {
        dependsOn 'buildAuthoringTomcatDockerWithProfile'
    }
    dependsOn 'buildGitSshServerDocker'
}

task buildDeliveryDockers {
    dependsOn 'buildDeployerDocker'
    dependsOn 'buildDeliveryTomcatDocker'
    dependsOn 'buildDeliveryTomcatDockerWithCrafterSearch'
    if (includeProfile) {
        dependsOn 'buildDeliveryTomcatDockerWithProfile'
    }
}
