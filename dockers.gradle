def dockerImageDir = "${projectDir}/docker/images"
def dockerImageBuildDir = "${dockerImageDir}/build"

task buildAuthoringTomcatDocker {
    def buildDir = "${dockerImageBuildDir}/authoring/tomcat"

    doFirst {
        delete buildDir
        mkdir buildDir 
    }

    doLast {
        copy {
            from "${dockerImageDir}/authoring/tomcat/"
            into buildDir
        }

        copy {
            from "${authEnvDir}/bin/"
            into "${buildDir}/bin"     
            exclude "migration"
            exclude "upgrade"
            exclude "crafter-deployer"
            exclude "elasticsearch"
            exclude "solr"
            exclude "dbms"
            exclude "apache-tomcat/work/**"
            exclude "apache-tomcat/temp/**"
            exclude "apache-tomcat/webapps/crafter-search*"
            if (!includeProfile) {
                exclude "apache-tomcat/webapps/crafter-profile*"
            }
            exclude "apache-tomcat/webapps/crafter-social*"
            exclude "apache-tomcat/webapps/ROOT"
            exclude "apache-tomcat/webapps/studio"
            exclude "**/*.pid"
        }

        def tag

        if (includeProfile) {
            tag = "craftercms/authoring_tomcat_w_profile:${project.version}"
        } else {
            tag = "craftercms/authoring_tomcat:${project.version}"
        }

        exec {
            commandLine commandLinePrefix + ['docker', 'build', '-t', tag, buildDir]
        }
    }
}

task buildDeliveryTomcatDocker {
    def buildDir = "${dockerImageBuildDir}/delivery/tomcat"

    doFirst {
        delete buildDir
        mkdir buildDir 
    }

    doLast {
        copy {
            from "${dockerImageDir}/delivery/tomcat/"
            into buildDir
        }

        copy {
            from "${deliveryEnvDir}/bin/"
            into "${buildDir}/bin"     
            exclude "migration"
            exclude "upgrade"
            exclude "crafter-deployer"
            exclude "elasticsearch"
            exclude "solr"
            exclude "apache-tomcat/work/**"
            exclude "apache-tomcat/temp/**"
            exclude "apache-tomcat/webapps/crafter-search*"
            if (!includeProfile) {
                exclude "apache-tomcat/webapps/crafter-profile*"
            }
            exclude "apache-tomcat/webapps/crafter-social*"           
            exclude "apache-tomcat/webapps/ROOT"
            exclude "**/*.pid"
        }

        def tag

        if (includeProfile) {
            tag = "craftercms/delivery_tomcat_w_profile:${project.version}"
        } else {
            tag = "craftercms/delivery_tomcat:${project.version}"
        }

        exec {
            commandLine commandLinePrefix + ['docker', 'build', '-t', tag, buildDir]
        }
    }
}

task buildDeployerDocker {
    def buildDir = "${dockerImageBuildDir}/deployer"

    doFirst {
        delete buildDir
        mkdir buildDir 
    }

    doLast {
        copy {
            from "${dockerImageDir}/deployer/"
            into buildDir
        }

        copy {
            from "${deliveryEnvDir}/bin/"
            into "${buildDir}/bin"     
            exclude "migration"
            exclude "upgrade"
            exclude "apache-tomcat"
            exclude "elasticsearch"
            exclude "solr"
            exclude "**/*.pid"
        }

        exec {
            commandLine commandLinePrefix + ['docker', 'build', '-t', "craftercms/deployer:${project.version}", buildDir]
        }
    }
}

task buildGitSshServerDocker {
    def buildDir = "${dockerImageBuildDir}/git_ssh_server"

    doFirst {
        delete buildDir
        mkdir buildDir 
    }

    doLast {
        copy {
            from "${dockerImageDir}/git_ssh_server/"
            into buildDir
        }

        exec {
            commandLine commandLinePrefix + ['docker', 'build', '-t', "craftercms/git_ssh_server:${project.version}", buildDir]
        }
    }    
}

task buildAuthoringDockers {
    dependsOn 'buildAuthoringTomcatDocker'
    dependsOn 'buildGitSshServerDocker'
}

task buildDeliveryDockers {
    dependsOn 'buildDeployerDocker'
    dependsOn 'buildDeliveryTomcatDocker'
}
